---
layout: post
title:      "One Page Fits All: Conceptualizing the DOM"
date:       2021-02-23 04:59:55 +0000
permalink:  one_page_fits_all_conceptualizing_the_dom
---


When I first started learning Javascript, the concept of the DOM eluded me a bit.  Specifically, the relationship between the DOM and the underlying HTML source code was somewhat unclear.  I knew that the HTML held the basic framework for the bits and pieces of the webpages I was viewing.  I knew that what I saw in my browser was a product of the DOM, a representation of that underlying source code.  Then, I started to delve into the developer console and play around with the elements of webpages, and the relationship between DOM and HTML muddied again.  I was adding, deleting, and changing HTML elements in my developer console.  I could change how webpages in my browser looked by typing code into this console.  But, all my changes went away as soon as I refreshed the page, regardless of how many HTML elements I changed.  What was happening here?

One analogy I came up with was to picture it like taking notes in a classroom lecture.  In this comparison, the teacher writing notes up on the board would be like the underlying HTML source code.  These chalkboard writings could be detailed, or they could be very basic and only convey the general structure of what the lecturer was trying to discuss.  You, the student, copying those notes into your notebook represents the developer creating and manipulating the DOM.  Your notebook would have all the notes from the chalkboard written down, but you would also have customized it in a way that suited your understanding.  You would have added in topics the lecturer expanded on during the lecture but didn't write up on the board, or information you received when another student asked a relevant question.  Both the information on the board and the information off the board ends up in your notebook.  In the same way, the DOM takes the underlying HTML code provided to it and, using Javascript written by the developer, customizes it in the way that will best suit whatever the developer is trying to convey to the end user.

Finally, after the lecture is finished, you hand the notebook full of notes to your friend.  The information your friend sees in the notebook may or may not rigidly conform to the original set of notes that were written on the chalkboard in the lecture.  Rather, it would be an aggregate of the underlying structure and all of the extra information and customization you applied when writing in the notebook.  Similarly, the end user of a webpage only sees this aggregate of information provided by the DOM.  The DOM shows the user the underlying source code after it has been modified, added to, and configured by the Javascript the developer wrote.  In reality, the base-level HTML file might actually be quite simple compared to the resulting webpage.

This analogy helped remind me of the abilities of the DOM in customizing the user experience in a webpage.  Even if an HTML file is sparse, Javascript and clever manipulation of the DOM can turn it into a detailed and engaging experience for an end user.
